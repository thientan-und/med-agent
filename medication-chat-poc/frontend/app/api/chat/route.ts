import { NextRequest, NextResponse } from 'next/server';

// Proxy to FastAPI backend
export async function POST(request: NextRequest) {
  try {
    const requestBody = await request.json();
    const { message, conversationHistory, sessionId, patientInfo, vitalSigns } = requestBody;

    if (!message || typeof message !== 'string') {
      return NextResponse.json(
        { error: 'Message is required' },
        { status: 400 }
      );
    }

    // Check for greetings (Thai and English)
    const greetingPatterns = [
      /^(hi|hello|hey|good morning|good afternoon|good evening)$/i,
      /^(‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ|‡∏´‡∏ß‡∏±‡∏î‡∏î‡∏µ|‡∏î‡∏µ‡∏à‡πâ‡∏≤|‡∏î‡∏µ‡∏Ñ‡πà‡∏∞|‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö|‡∏≠‡∏£‡∏∏‡∏ì‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡πå|‡∏£‡∏≤‡∏ï‡∏£‡∏µ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡πå|‡∏™‡∏≤‡∏¢‡∏ò‡∏≤‡∏£)$/i,
      /^(‡∏Æ‡∏±‡∏•‡πÇ‡∏´‡∏•|‡∏Æ‡∏≤‡∏¢|‡πÄ‡∏Æ‡πâ|‡πÄ‡∏Æ‡∏•‡πÇ‡∏•‡πà)$/i
    ];

    const isGreeting = greetingPatterns.some(pattern => pattern.test(message.trim()));

    if (isGreeting) {
      return NextResponse.json({
        response: `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞/‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏î‡πâ‡∏≤‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û üè•

‡∏â‡∏±‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ä‡πà‡∏ß‡∏¢‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö:
‚Ä¢ ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡πá‡∏ö‡∏õ‡πà‡∏ß‡∏¢‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
‚Ä¢ ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤

‚ö†Ô∏è ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡πÇ‡∏£‡∏Ñ ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå`
      });
    }

    // Check if doctor approval is required (MVP requirement) - Temporarily disabled for medication testing
    const requireDoctorApproval = false; // process.env.REQUIRE_DOCTOR_APPROVAL === 'true'; // Default to false

    if (requireDoctorApproval) {
      // First, get AI analysis from backend for doctor review
      try {
        const currentSessionId = sessionId || `session-${Date.now()}`;
        const chatId = `chat-${currentSessionId}`;

        // Call backend AI service to get real medical analysis
        const backendUrl = process.env.BACKEND_URL || 'http://localhost:8000';
        const aiResponse = await fetch(`${backendUrl}/api/v1/medical/chat/`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            message,
            conversation_history: conversationHistory || [],
            patient_info: patientInfo || null,
            vital_signs: vitalSigns || null,
            preferred_language: 'auto',
            session_id: currentSessionId,
            include_reasoning: true
          })
        });

        let aiData: any = {};
        let aiResponseText = '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞/‡∏Ñ‡∏£‡∏±‡∏ö ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• AI ‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ';
        let detectedConditions: string[] = ['‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÇ‡∏î‡∏¢‡πÅ‡∏û‡∏ó‡∏¢‡πå'];
        let suggestedMedications: any[] = [];
        let riskLevel: 'low' | 'medium' | 'high' = 'medium';
        let confidence = 0.5;
        let isUrgent = false;

        if (aiResponse.ok) {
          aiData = await aiResponse.json();
          aiResponseText = aiData.message || aiResponseText;

          // Extract diagnosis information
          if (aiData.diagnosis?.primary_diagnosis) {
            detectedConditions = [aiData.diagnosis.primary_diagnosis];
            if (aiData.diagnosis.differential_diagnoses?.length > 0) {
              detectedConditions = [...detectedConditions, ...aiData.diagnosis.differential_diagnoses];
            }
          }

          // Extract medication information
          if (aiData.treatment?.medications?.length > 0) {
            suggestedMedications = aiData.treatment.medications.map((med: any) => ({
              diagnosisCode: '',
              diagnosisName: '',
              drugName: med.name || med.drugName || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
              quantity: med.quantity || med.dosage || '',
              frequency: med.frequency || '',
              duration: med.duration || '',
              recommendations: med.instructions || med.recommendations || ''
            }));
          }

          // Determine risk level and urgency
          confidence = aiData.diagnosis?.confidence || 0.5;
          if (aiData.triage?.priority === 'high' || aiData.triage?.urgency === 'urgent') {
            riskLevel = 'high';
            isUrgent = true;
          } else if (aiData.triage?.priority === 'low') {
            riskLevel = 'low';
          }
        } else {
          console.error('Backend AI API error:', aiResponse.status, aiResponse.statusText);
        }

        // Create comprehensive approval data with real AI analysis
        const approvalData = {
          chatId: chatId,
          patientId: currentSessionId,
          patientName: `‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ ${currentSessionId}`,
          patientContext: {
            medicalHistory: patientInfo?.medicalHistory || '',
            currentMedications: patientInfo?.currentMedications || '',
            drugAllergies: patientInfo?.drugAllergies || '',
            foodAllergies: patientInfo?.foodAllergies || '',
            height: patientInfo?.height || 0,
            weight: patientInfo?.weight || 0,
            age: patientInfo?.age || 0,
            gender: patientInfo?.gender || 'male'
          },
          aiResponse: aiResponseText,
          originalMessage: message,
          timestamp: new Date().toISOString(),
          riskLevel: riskLevel,
          confidence: confidence,
          isUrgent: isUrgent,
          aiAnalysis: {
            detectedConditions: detectedConditions,
            suggestedMedications: suggestedMedications,
            riskLevel: riskLevel,
            ragScore: aiData.metadata?.rag_results_count || 0
          }
        };

        // Create corresponding active chat
        const chatData = {
          id: chatId,
          patientId: currentSessionId,
          patientName: `‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ ${currentSessionId}`,
          status: 'waiting_approval',
          messages: [
            {
              id: `msg-${Date.now()}`,
              role: 'patient',
              content: message,
              timestamp: new Date().toISOString(),
              status: 'sent'
            }
          ],
          lastActivity: new Date().toISOString(),
          unreadCount: 1
        };

        // Add to doctor's pending queue
        const pendingUrl = `${request.nextUrl.origin}/api/doctor/pending`;
        await fetch(pendingUrl, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(approvalData)
        });

        // Add to active chats
        const chatsUrl = `${request.nextUrl.origin}/api/doctor/chats`;
        await fetch(chatsUrl, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(chatData)
        });
      } catch (error) {
        console.error('Error adding to pending queue:', error);
      }

      // Return waiting for approval message instead of processing immediately
      return NextResponse.json({
        response: `üìã ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß

‚è≥ **‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞**: ‡∏£‡∏≠‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤

ü©∫ **‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ**:
‚Ä¢ ‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏à‡πâ‡∏á
‚Ä¢ ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
‚Ä¢ ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 15-30 ‡∏ô‡∏≤‡∏ó‡∏µ

‚ö†Ô∏è **‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô**: ‡πÇ‡∏ó‡∏£ 1669 ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ

üí¨ **‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏**: ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß`,
        type: 'waiting_approval',
        status: 'pending_approval',
        metadata: {
          processing_time_ms: 0,
          requires_approval: true,
          session_id: sessionId
        }
      });
    }

    // Proxy to FastAPI backend (only when approval not required)
    try {
      const backendUrl = process.env.BACKEND_URL || 'http://localhost:8000';

      const response = await fetch(`${backendUrl}/api/v1/medical/chat/`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message,
          conversation_history: conversationHistory || [],
          patient_info: patientInfo || null,
          vital_signs: vitalSigns || null,
          preferred_language: 'auto',
          session_id: sessionId || null,
          include_reasoning: false
        })
      });

      if (!response.ok) {
        console.error('Backend API error:', response.status, response.statusText);

        // Fallback response
        return NextResponse.json({
          response: `‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞/‡∏Ñ‡∏£‡∏±‡∏ö ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÇ‡∏ó‡∏£ 1669

‚ö†Ô∏è ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡πÇ‡∏£‡∏Ñ ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå`
        });
      }

      const result = await response.json();

      // Return in the format expected by the frontend
      return NextResponse.json({
        response: result.message || '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏î‡πâ',
        type: result.type || 'general',
        metadata: result.metadata || {},
        triage: result.triage || null,
        diagnosis: result.diagnosis || null,
        treatment: result.treatment || null
      });

    } catch (backendError) {
      console.error('Backend connection error:', backendError);

      // Fallback response when backend is unavailable
      return NextResponse.json({
        response: `‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞/‡∏Ñ‡∏£‡∏±‡∏ö ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÇ‡∏ó‡∏£ 1669

‚ö†Ô∏è ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡πÇ‡∏£‡∏Ñ ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå`
      });
    }

  } catch (error) {
    console.error('Chat API error:', error);
    return NextResponse.json(
      {
        error: 'Internal server error',
        response: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
      },
      { status: 500 }
    );
  }
}