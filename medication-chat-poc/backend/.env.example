# Medical Chat AI Backend - Environment Configuration Template
# Copy this file to .env and fill in your values

# =============================================================================
# Application Settings
# =============================================================================

# Application name and version
APP_NAME="Medical Chat AI Backend"
VERSION="2.0.0"

# Environment: development, production, testing
ENVIRONMENT=development

# Server configuration
HOST=0.0.0.0
PORT=8000
DEBUG=true

# =============================================================================
# Security Settings
# =============================================================================

# Secret key for JWT tokens and encryption (CHANGE IN PRODUCTION!)
SECRET_KEY=your-secret-key-change-in-production

# CORS allowed origins (comma-separated)
ALLOWED_ORIGINS=http://localhost:3000,http://localhost:3001,http://localhost:8080

# =============================================================================
# Database Configuration
# =============================================================================

# Database URL for SQLAlchemy
# SQLite (development): sqlite:///./medical_chat.db
# PostgreSQL: postgresql+asyncpg://user:password@localhost/medical_chat
DATABASE_URL=sqlite:///./medical_chat.db

# =============================================================================
# AI Model Configuration
# =============================================================================

# Ollama server URL
OLLAMA_URL=http://localhost:11434

# AI model names (must be available in Ollama)
SEALLM_MODEL=seallm-7b-v2
MEDLLAMA_MODEL=medllama2

# =============================================================================
# External Services
# =============================================================================

# Qdrant vector database (for RAG functionality)
QDRANT_URL=https://5ab0afa9-4525-4842-86df-b7662668bf20.us-east4-0.gcp.cloud.qdrant.io
QDRANT_API_KEY=5ab0afa9-4525-4842-86df-b7662668bf20 

# =============================================================================
# Medical Data Paths
# =============================================================================

# CSV files containing medical knowledge base
MEDICINE_DATA_PATH=/home/naiplawan/Downloads/Medicine List - ตัวยาทั้งหมด.csv
DIAGNOSIS_DATA_PATH=/home/naiplawan/Downloads/Medicine List - ข้อวินิฉัย.csv
TREATMENT_DATA_PATH=/home/naiplawan/Downloads/Medicine List - ข้อวินิฉัยและยาที่จ่าย.csv

# Training and feedback data
TRAINING_DATA_PATH=./training-data/enhanced-training.json
FEEDBACK_DATA_PATH=./training-data/doctor-feedback.json

# =============================================================================
# Rate Limiting
# =============================================================================

# Rate limiting configuration
MAX_REQUESTS_PER_MINUTE=60
MAX_REQUESTS_PER_HOUR=1000

# =============================================================================
# Logging Configuration
# =============================================================================

# Log level: DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_LEVEL=INFO

# Log file path
LOG_FILE=logs/medical_ai.log

# =============================================================================
# WebSocket Configuration
# =============================================================================

# WebSocket server port
WEBSOCKET_PORT=3001

# =============================================================================
# Medical AI Settings
# =============================================================================

# Maximum conversation history to keep per session
MAX_CONVERSATION_HISTORY=10

# Confidence thresholds for AI decisions
EMERGENCY_CONFIDENCE_THRESHOLD=0.8
DIAGNOSIS_CONFIDENCE_THRESHOLD=0.6

# Maximum RAG search results to consider
MAX_RAG_RESULTS=5

# =============================================================================
# Thai Language Processing
# =============================================================================

# Enable Thai dialect detection
ENABLE_DIALECT_DETECTION=true

# Enable translation fallback when SeaLLM fails
ENABLE_TRANSLATION_FALLBACK=true

# =============================================================================
# Development Settings
# =============================================================================

# For development: allow insecure connections
DEVELOPMENT_MODE=true

# Mock AI responses for testing (when Ollama unavailable)
MOCK_AI_RESPONSES=false

# Verbose logging for debugging
VERBOSE_LOGGING=false

# =============================================================================
# Production Settings (uncomment for production)
# =============================================================================

# DEBUG=false
# LOG_LEVEL=WARNING
# ALLOWED_ORIGINS=https://your-medical-app.com,https://api.your-medical-app.com
# SECRET_KEY=your-super-secure-production-secret-key
# DATABASE_URL=postgresql+asyncpg://username:password@localhost/medical_chat_prod

# =============================================================================
# Optional Features
# =============================================================================

# Redis for distributed caching and rate limiting
# REDIS_URL=redis://localhost:6379/0

# Monitoring and metrics
# PROMETHEUS_ENABLED=true
# PROMETHEUS_PORT=9090

# Email notifications for emergencies
# SMTP_SERVER=smtp.gmail.com
# SMTP_PORT=587
# SMTP_USERNAME=your-email@gmail.com
# SMTP_PASSWORD=your-app-password

# =============================================================================
# Notes and Tips
# =============================================================================

# 1. Generate a secure secret key:
#    python -c "import secrets; print(secrets.token_urlsafe(32))"

# 2. For production, use PostgreSQL instead of SQLite:
#    DATABASE_URL=postgresql+asyncpg://user:pass@localhost/dbname

# 3. Ensure Ollama is running with required models:
#    ./setup-ollama.sh
#    ./setup-models.sh

# 4. Test configuration:
#    python start.py --check-only

# 5. For Docker deployment, use environment-specific overrides:
#    docker run -e DATABASE_URL=... -e SECRET_KEY=... medical-ai-backend